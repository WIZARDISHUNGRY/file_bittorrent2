Add testsuite based on Perl Bencode package to File_Bittorrent, and fix all
cases where File_Bittorrent deviated from the testsuite.

Signed-off-by: Robin H. Johnson <robbat2@gentoo.org>
Patch-license: GPL-2
Date: 2006-10-18

diff -Nuar File_Bittorrent-1.0.2.orig/File/Bittorrent/Decode.php File_Bittorrent-1.0.2/File/Bittorrent/Decode.php
--- File_Bittorrent-1.0.2.orig/File/Bittorrent/Decode.php	2006-09-04 04:02:50.000000000 -0500
+++ File_Bittorrent-1.0.2/File/Bittorrent/Decode.php	2006-10-19 03:21:21.000000000 -0500
@@ -161,10 +161,20 @@
     */
     function decode($str)
     {
+    	$this->last_error = NULL;
         $this->_source = $str;
         $this->_position  = 0;
         $this->_source_length = strlen($this->_source);
-        return $this->_bdecode();
+	$result = $this->_bdecode();
+	if($this->_position < $this->_source_length) {
+		$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::decode() - Trailing garbage in file');
+		//printf('File_Bittorrent_Decode::decode() - Trailing garbage in file');
+	}
+	if($this->last_error !== NULL) {
+		return false;
+	} else {
+		return $result;
+	}
     }
 
     /**
@@ -297,8 +307,14 @@
             $this->_position++;
             return $this->_decode_dict();
             break;
+//	case 'e':
+//	    //$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_bdecode() - Unterminated dictionary or list');
+//            $this->_position++;
+//	    //return FALSE;
+//	    break;
         default:
-            return $this->_decode_string();
+	    $s = $this->_decode_string();
+            return $s;
         }
     }
 
@@ -315,12 +331,38 @@
     */
     function _decode_dict()
     {
+    	$return = array();
+	$ended = FALSE;
+	$lastkey = NULL;
         while ($char = $this->_getChar()) {
-            if ($char == 'e') break;
+            if ($char == 'e') {
+	    	$ended = TRUE;
+	    	break;
+	    }
+	    if (!ctype_digit($char)) {
+		    $this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_dict() - Invalid dictionary key');
+		    $return = FALSE;
+		    break;
+	    }
             $key = $this->_decode_string();
+	    if(isset($return[$key])) {
+		    $this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_dict() - Duplicate dictionary key');
+		    $return = FALSE;
+		    break;
+	    }
+	    if($key < $lastkey) {
+		    $this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_dict() - Missorted dictionary key');
+		    $return = FALSE;
+		    break;
+	    }
             $val = $this->_bdecode();
             $return[$key] = $val;
+	    $lastkey = $key;
         }
+	if(!$ended) {
+		$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_dict() - unterminated dictionary');
+		$return = FALSE;
+	}
         $this->_position++;
         return $return;
     }
@@ -337,15 +379,29 @@
     */
     function _decode_string()
     {
+	// Check for bad leading zero
+	if($this->_source{$this->_position} == '0' && $this->_source{$this->_position+1} != ':') {
+		$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_string() - leading zero in string length');
+		//printf("File_Bittorrent_Decode::_decode_string() - leading zero in string length\n");
+		return FALSE;
+	}
         // Find position of colon
         // Supress error message if colon is not found which may be caused by a corrupted or wrong encoded string
         if(!$pos_colon = @strpos($this->_source, ':', $this->_position)) {
-            return false;
+		$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_string() - Colon not found');
+		//printf("File_Bittorrent_Decode::_decode_string() - Colon not found\n");
+		return false;
         }
         // Get length of string
         $str_length = intval(substr($this->_source, $this->_position, $pos_colon));
+	if($str_length+$pos_colon + 1 > $this->_source_length) {
+		$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_string() - Input too short for string length');
+		//printf("File_Bittorrent_Decode::_decode_string() - Input too short for string length\n");
+		return FALSE;
+	}
         // Get string
-        $return = substr($this->_source, $pos_colon + 1, $str_length);
+	if($str_length === 0) $return = '';
+		else $return = substr($this->_source, $pos_colon + 1, $str_length);
         // Move Pointer after string
         $this->_position = $pos_colon + $str_length + 1;
         return $return;
@@ -364,6 +420,23 @@
     function _decode_int()
     {
         $pos_e  = strpos($this->_source, 'e', $this->_position);
+	$p = $this->_position;
+	if($p === $pos_e) {
+		$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_int() - empty integer');
+		return FALSE;
+	}
+	if($this->_source{$this->_position} == '-') $p++;
+	if($this->_source{$p} == '0' && ($p != $this->_position || $pos_e > $p+1)) {
+		$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_int() - leading zero in integer');
+		return FALSE;
+	}
+	for($i = $p; $i < $pos_e-1; $i++) {
+		//printf("c: %s\n",$this->_source{$i});
+		if(!ctype_digit($this->_source{$i})) {
+		 $this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_int() - non-digit characters in integer');
+		 return FALSE;
+		}
+	}
         // The return value showld be automatically casted to float if the intval would
         // overflow. The "+ 0" accomplishes exactly that, using the internal casting
         // logic of PHP
@@ -388,8 +461,20 @@
     {
         $return = array();
         $char = $this->_getChar();
-        while ($this->_source{$this->_position} != 'e') {
+	$p1 = $p2 = 0;
+	if($char === FALSE) {
+		$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_list() - unterminated list');
+	    	return FALSE; 
+	}
+        while ($char !== FALSE && $this->_source{$this->_position} != 'e') {
+	    $p1 = $this->_position;
             $val = $this->_bdecode();
+	    $p2 = $this->_position;
+	    // Empty does not work here
+	    if($p1 == $p2)  {
+		$this->last_error = PEAR::raiseError('File_Bittorrent_Decode::_decode_list() - unterminated list');
+	    	return FALSE; 
+	    }
             $return[] = $val;
         }
         $this->_position++;
diff -Nuar File_Bittorrent-1.0.2.orig/test.php File_Bittorrent-1.0.2/test.php
--- File_Bittorrent-1.0.2.orig/test.php	1969-12-31 18:00:00.000000000 -0600
+++ File_Bittorrent-1.0.2/test.php	2006-10-19 03:24:53.000000000 -0500
@@ -0,0 +1,138 @@
+<?php
+// +----------------------------------------------------------------------+
+// | Testcases for BDecode                                                |
+// +----------------------------------------------------------------------+
+// | Copyright (C) 2006 Robin H. Johnson <robbat2@gentoo.org>             |
+// +----------------------------------------------------------------------+
+// | This library is free software; you can redistribute it and/or        |
+// | modify it under the terms of the GNU Lesser General Public           |
+// | License as published by the Free Software Foundation; either         |
+// | version 2.1 of the License, or (at your option) any later version.   |
+// |                                                                      |
+// | This library is distributed in the hope that it will be useful,      |
+// | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
+// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    |
+// | Lesser General Public License for more details.                      |
+// |                                                                      |
+// | You should have received a copy of the GNU Lesser General Public     |
+// | License along with this library; if not, write to the                |
+// | Free Software Foundation, Inc.                                       |
+// | 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA               |
+// +----------------------------------------------------------------------+
+
+/**
+* Example usage of File_Bittorrent
+*
+* @author Robin H. Johnson <robbat2@gentoo.org>
+* @version $Id$
+*/
+
+/**
+* Include class
+*/
+
+require_once 'File/Bittorrent/Decode.php';
+
+$testarray = array(
+	'0:0:'                     => 'data past end of first correct bencoded string',
+	'ie'                       => 'empty integer',
+	'i341foo382e'              => 'malformed integer',
+	'i4e'                      => 4,
+	'i0e'                      => 0,
+	'i123456789e'              => 123456789,
+	'i-10e'                    => -10,
+	'i-0e'                     => 'negative zero integer',
+	'i123'                     => 'unterminated integer',
+	''                         => 'empty string',
+	'i6easd'                   => 'integer with trailing garbage',
+	'35208734823ljdahflajhdf'  => 'garbage looking vaguely like a string, with large count',
+	'2:abfdjslhfld'            => 'string with trailing garbage',
+	'0:'                       => '',
+	'3:abc'                    => 'abc',
+	'10:1234567890'            => '1234567890',
+	'02:xy'                    => 'string with extra leading zero in count',
+	'l'                        => 'unclosed empty list',
+	'le'                       => array(),
+	'leanfdldjfh'              => 'empty list with trailing garbage',
+	'l0:0:0:e'                 => array('', '', ''),
+	'relwjhrlewjh'             => 'complete garbage',
+	'li1ei2ei3ee'              => array( 1, 2, 3 ),
+	'l3:asd2:xye'              => array( 'asd', 'xy' ),
+	'll5:Alice3:Bobeli2ei3eee' => array ( array( 'Alice', 'Bob' ), array( 2, 3 ) ),
+	'd'                        => 'unclosed empty dict',
+	'defoobar'                 => 'empty dict with trailing garbage',
+	'de'                       => array(),
+	'd1:a0:e'                  => array('a'=>''),
+	'd3:agei25e4:eyes4:bluee'  => array('age' => 25, 'eyes' => 'blue' ),
+	'd8:spam.mp3d6:author5:Alice6:lengthi100000eee' => array('spam.mp3' => array( 'author' => 'Alice', 'length' => 100000 )),
+	'd3:fooe'                  => 'dict with odd number of elements',
+	'di1e0:e'                  => 'dict with integer key',
+	'd1:b0:1:a0:e'             => 'missorted keys',
+	'd1:a0:1:a0:e'             => 'duplicate keys',
+	'i03e'                     => 'integer with leading zero',
+	'l01:ae'                   => 'list with string with leading zero in count',
+	'9999:x'                   => 'string shorter than count',
+	'l0:'                      => 'unclosed list with content',
+	'd0:0:'                    => 'unclosed dict with content',
+	'd0:'                      => 'unclosed dict with odd number of elements',
+	'00:'                      => 'zero-length string with extra leading zero in count',
+	'l-3:e'                    => 'list with negative-length string',
+	'i-03e'                    => 'negative integer with leading zero',
+	'di0e0:e'		   => 'dictionary with integer key',
+	'd8:announceldi0e0:eee'	   => 'nested dictionary with integer key',
+	'd8:announcedi0e0:e18:azureus_propertiesi0ee'		   => 'nested dictionary with integer key #2',
+);
+// Thanks to IsoHunt.com for the last 3 testcases of bad data seen in their system.
+
+$File_Bittorrent_Decode = new File_Bittorrent_Decode;
+ini_set('mbstring.internal_encoding','ASCII');
+
+// If you want output on error tracing
+//PEAR::setErrorHandling (PEAR_ERROR_PRINT);
+
+$fail = 0;
+foreach($testarray as $ti => $to) {
+	$correct = $to;
+	$actual = $File_Bittorrent_Decode->decode($ti);
+	$error = TRUE;
+	if(is_array($actual) && is_array($correct)) {
+		$result = array_diff_assoc($correct, $actual);
+		$error = count($result) > 0;
+	}
+	else if(is_bool($actual) && $actual === FALSE && is_string($correct)) {
+	        $error = FALSE;
+	}
+	else if(is_array($actual) != is_array($correct)) {
+		$error = TRUE;
+	}
+	else if(is_integer($actual) && is_integer($correct)) {
+		$error = $actual !== $correct;
+	}
+	else if(is_string($actual) && is_string($correct)) {
+		$error = strcmp($actual,$correct) != 0;
+	}
+	if($error) {
+		printf("tn='%s' t='%s'\n",$to,$ti);
+		printf("Expected:\n");
+		var_dump($correct);
+		printf("Actual:\n");
+		var_dump($actual);
+		printf("\n");
+		$fail++;
+	}
+}
+// Now we test torrents if any were passed
+if($fail == 0) {
+	for($i = 1; $i < count($GLOBALS['argv']); $i++) {
+		$filename = $GLOBALS['argv'][$i];
+		//printf("%s\n",$filename);
+		$content = file_get_contents($filename);
+		$actual = $File_Bittorrent_Decode->decode($content);
+		if(!is_array($actual)) {
+			printf("corrupt-torrent: %s\n",$filename);
+			$fail++;
+		}
+	}
+}
+
+printf("Failures: %d\n",$fail);
